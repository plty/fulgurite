diff --git a/dist/index.d.ts b/dist/index.d.ts
index 2ea4a69ee1a871deb41134d73309c7714dfec7ff..5185c6bf677daad7ec2576000ee3a652eb0774ec 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -136,7 +136,7 @@ interface WidgetDecorationSpec {
     Determines whether this is a block widgets, which will be drawn
     between lines, or an inline widget (the default) which is drawn
     between the surrounding text.
-    
+
     Note that block-level decorations should not have vertical
     margins, and if you dynamically change their height, you should
     make sure to call
@@ -303,15 +303,15 @@ declare abstract class Decoration extends RangeValue {
     /**
     @internal
     */
-    startSide: number, 
+    startSide: number,
     /**
     @internal
     */
-    endSide: number, 
+    endSide: number,
     /**
     @internal
     */
-    widget: WidgetType | null, 
+    widget: WidgetType | null,
     /**
     The config object used to create this decoration. You can
     include additional properties in there to store metadata about
@@ -551,7 +551,7 @@ interface MouseSelectionStyle {
     with the event passed here. In case of a plain click, those may
     both be the `mousedown` event, in case of a drag gesture, the
     latest `mousemove` event will be passed.
-    
+
     When `extend` is true, that means the new selection should, if
     possible, extend the start selection. If `multiple` is true, the
     new selection should be added to the original selection.
@@ -562,7 +562,7 @@ interface MouseSelectionStyle {
     progress. When the document changes, it may be necessary to map
     some data (like the original selection or start position)
     through the changes.
-    
+
     This may return `true` to indicate that the `get` method should
     get queried again after the update, because something in the
     update could change its result. Be wary of infinite loops when
@@ -765,7 +765,7 @@ declare class EditorView {
     [option](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.dispatchTransactions).
     This function is bound to the view instance, so it does not have
     to be called as a method.
-    
+
     Note that when multiple `TransactionSpec` arguments are
     provided, these define a single transaction (the specs will be
     merged), not a sequence of transactions.
@@ -880,7 +880,7 @@ declare class EditorView {
     When the start position was the last one on the line, the
     returned position will be across the line break. If there is no
     further line, the original position is returned.
-    
+
     By default, this method moves over a single cluster. The
     optional `by` argument can be used to move across more. It will
     be called with the first cluster as argument, and should return
@@ -914,7 +914,7 @@ declare class EditorView {
     it defaults to moving to the next line (including wrapped
     lines). Otherwise, `distance` should provide a positive distance
     in pixels.
-    
+
     When `start` has a
     [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
     motion will use that as a target horizontal position. Otherwise,
@@ -927,7 +927,7 @@ declare class EditorView {
     Find the DOM parent node and offset (child offset if `node` is
     an element, character offset when it is a text node) at the
     given document position.
-    
+
     Note that for positions that aren't currently in
     `visibleRanges`, the resulting DOM position isn't necessarily
     meaningful (it may just point before or after a placeholder
@@ -1076,7 +1076,7 @@ declare class EditorView {
     only affects the editor's own scrollable element, not parents.
     See also
     [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).
-    
+
     The effect should be used with a document identical to the one
     it was created for. Failing to do so is not an error, but may
     not scroll to the expected position. You can
@@ -1119,7 +1119,7 @@ declare class EditorView {
     positions between which the change was found, and the new
     content. When one returns true, no further input handlers are
     called and the default behavior is prevented.
-    
+
     The `insert` argument can be used to get the default transaction
     that would be applied for this input. This can be useful when
     dispatching the custom behavior as a separate transaction.
@@ -1184,13 +1184,13 @@ declare class EditorView {
     A facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)
     are shown in the view. Decorations can be provided in two
     ways—directly, or via a function that takes an editor view.
-    
+
     Only decoration sets provided directly are allowed to influence
     the editor's vertical layout structure. The ones provided as
     functions are called _after_ the new viewport has been computed,
     and thus **must not** introduce block widgets or replacing
     decorations that cover line breaks.
-    
+
     If you want decorated ranges to behave like atomic units for
     cursor motion and deletion purposes, also provide the range set
     containing the decorations to
@@ -1242,14 +1242,14 @@ declare class EditorView {
     [`style-mod`](https://github.com/marijnh/style-mod#documentation)
     style spec providing the styles for the theme. These will be
     prefixed with a generated class for the style.
-    
+
     Because the selectors will be prefixed with a scope class, rule
     that directly match the editor's [wrapper
     element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
     added—need to be explicitly differentiated by adding an `&` to
     the selector for that element—for example
     `&.cm-focused`.
-    
+
     When `dark` is set to true, the theme will be marked as dark,
     which will cause the `&dark` rules from [base
     themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
@@ -1483,7 +1483,7 @@ declare function dropCursor(): Extension;
 interface SpecialCharConfig {
     /**
     An optional function that renders the placeholder elements.
-    
+
     The `description` argument will be text that clarifies what the
     character is, which should be provided to screen readers (for
     example with the
@@ -1492,7 +1492,7 @@ interface SpecialCharConfig {
     as the
     [`title`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title)
     attribute).
-    
+
     The given placeholder string is a suggestion for how to display
     the character visually.
     */
@@ -1592,19 +1592,19 @@ declare class RectangleMarker implements LayerMarker {
     Create a marker with the given class and dimensions. If `width`
     is null, the DOM element will get no width style.
     */
-    constructor(className: string, 
+    constructor(className: string,
     /**
     The left position of the marker (in pixels, document-relative).
     */
-    left: number, 
+    left: number,
     /**
     The top position of the marker.
     */
-    top: number, 
+    top: number,
     /**
     The width of the marker, or null if it shouldn't get a width assigned.
     */
-    width: number | null, 
+    width: number | null,
     /**
     The height of the marker.
     */
@@ -1689,7 +1689,7 @@ declare class MatchDecorator {
         call `add` to create decorations for them. Note that the
         decorations should appear *in* the given range, and the
         function should have no side effects beyond calling `add`.
-        
+
         The `decoration` option is ignored when `decorate` is
         provided.
         */
@@ -1761,11 +1761,11 @@ declare function tooltips(config?: {
     scrollable parent elements. However, CSS rules like `contain:
     layout` can break fixed positioning in child nodes, which can be
     worked about by using `"absolute"` here.
-    
+
     On iOS, which at the time of writing still doesn't properly
     support fixed positioning, the library always uses absolute
     positioning.
-    
+
     If the tooltip parent element sits in a transformed element, the
     library also falls back to absolute positioning.
     */
@@ -2138,4 +2138,9 @@ trailing whitespace.
 */
 declare function highlightTrailingWhitespace(): Extension;
 
-export { BidiSpan, BlockInfo, BlockType, type Command, type DOMEventHandlers, type DOMEventMap, Decoration, type DecorationSet, Direction, EditorView, type EditorViewConfig, GutterMarker, type KeyBinding, type LayerMarker, MatchDecorator, type MouseSelectionStyle, type Panel, type PanelConstructor, type PluginSpec, type PluginValue, type Rect, RectangleMarker, type Tooltip, type TooltipView, ViewPlugin, ViewUpdate, WidgetType, closeHoverTooltips, crosshairCursor, drawSelection, dropCursor, getDrawSelectionConfig, getPanel, getTooltip, gutter, gutterLineClass, gutters, hasHoverTooltips, highlightActiveLine, highlightActiveLineGutter, highlightSpecialChars, highlightTrailingWhitespace, highlightWhitespace, hoverTooltip, keymap, layer, lineNumberMarkers, lineNumbers, logException, panels, placeholder, rectangularSelection, repositionTooltips, runScopeHandlers, scrollPastEnd, showPanel, showTooltip, tooltips };
+declare const baseThemeID: string
+declare const baseLightID: string
+declare const baseDarkID: string
+declare const baseTheme: StyleModule
+
+export { BidiSpan, BlockInfo, BlockType, type Command, type DOMEventHandlers, type DOMEventMap, Decoration, type DecorationSet, Direction, EditorView, type EditorViewConfig, GutterMarker, type KeyBinding, type LayerMarker, MatchDecorator, type MouseSelectionStyle, type Panel, type PanelConstructor, type PluginSpec, type PluginValue, type Rect, RectangleMarker, type Tooltip, type TooltipView, ViewPlugin, ViewUpdate, WidgetType, closeHoverTooltips, crosshairCursor, drawSelection, dropCursor, getDrawSelectionConfig, getPanel, getTooltip, gutter, gutterLineClass, gutters, hasHoverTooltips, highlightActiveLine, highlightActiveLineGutter, highlightSpecialChars, highlightTrailingWhitespace, highlightWhitespace, hoverTooltip, keymap, layer, lineNumberMarkers, lineNumbers, logException, panels, placeholder, rectangularSelection, repositionTooltips, runScopeHandlers, scrollPastEnd, showPanel, showTooltip, tooltips, baseThemeID, baseLightID, baseDarkID, baseTheme };
diff --git a/dist/index.js b/dist/index.js
index d09577a356a573adfb89a36f5d81dff20c0f64f5..a814b4bd63e9061f05eb1b05ae614fac8f8e1529 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -1440,15 +1440,15 @@ class Decoration extends RangeValue {
     /**
     @internal
     */
-    startSide, 
+    startSide,
     /**
     @internal
     */
-    endSide, 
+    endSide,
     /**
     @internal
     */
-    widget, 
+    widget,
     /**
     The config object used to create this decoration. You can
     include additional properties in there to store metadata about
@@ -1849,11 +1849,11 @@ class BidiSpan {
     /**
     The start of the span (relative to the start of the line).
     */
-    from, 
+    from,
     /**
     The end of the span.
     */
-    to, 
+    to,
     /**
     The ["bidi
     level"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)
@@ -2285,7 +2285,7 @@ const nativeSelectionHidden = /*@__PURE__*/Facet.define({
     combine: values => values.some(x => x)
 });
 class ScrollTarget {
-    constructor(range, y = "nearest", x = "nearest", yMargin = 5, xMargin = 5, 
+    constructor(range, y = "nearest", x = "nearest", yMargin = 5, xMargin = 5,
     // This data structure is abused to also store precise scroll
     // snapshots, instead of a `scrollIntoView` request. When this
     // flag is `true`, `range` points at a position in the reference
@@ -2346,15 +2346,15 @@ class ViewPlugin {
     /**
     @internal
     */
-    id, 
+    id,
     /**
     @internal
     */
-    create, 
+    create,
     /**
     @internal
     */
-    domEventHandlers, 
+    domEventHandlers,
     /**
     @internal
     */
@@ -2564,11 +2564,11 @@ class ViewUpdate {
     /**
     The editor view that the update is associated with.
     */
-    view, 
+    view,
     /**
     The new editor state.
     */
-    state, 
+    state,
     /**
     The transactions involved in the update. May be empty.
     */
@@ -4572,20 +4572,20 @@ class BlockInfo {
     /**
     The start of the element in the document.
     */
-    from, 
+    from,
     /**
     The length of the element.
     */
-    length, 
+    length,
     /**
     The top position of the element (relative to the top of the
     document).
     */
-    top, 
+    top,
     /**
     Its height.
     */
-    height, 
+    height,
     /**
     @internal Weird packed field that holds an array of children
     for composite blocks, a decoration for block widgets, and a
@@ -7488,7 +7488,7 @@ class EditorView {
     When the start position was the last one on the line, the
     returned position will be across the line break. If there is no
     further line, the original position is returned.
-    
+
     By default, this method moves over a single cluster. The
     optional `by` argument can be used to move across more. It will
     be called with the first cluster as argument, and should return
@@ -7532,7 +7532,7 @@ class EditorView {
     it defaults to moving to the next line (including wrapped
     lines). Otherwise, `distance` should provide a positive distance
     in pixels.
-    
+
     When `start` has a
     [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
     motion will use that as a target horizontal position. Otherwise,
@@ -7547,7 +7547,7 @@ class EditorView {
     Find the DOM parent node and offset (child offset if `node` is
     an element, character offset when it is a text node) at the
     given document position.
-    
+
     Note that for positions that aren't currently in
     `visibleRanges`, the resulting DOM position isn't necessarily
     meaningful (it may just point before or after a placeholder
@@ -7722,7 +7722,7 @@ class EditorView {
     only affects the editor's own scrollable element, not parents.
     See also
     [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).
-    
+
     The effect should be used with a document identical to the one
     it was created for. Failing to do so is not an error, but may
     not scroll to the expected position. You can
@@ -7764,14 +7764,14 @@ class EditorView {
     [`style-mod`](https://github.com/marijnh/style-mod#documentation)
     style spec providing the styles for the theme. These will be
     prefixed with a generated class for the style.
-    
+
     Because the selectors will be prefixed with a scope class, rule
     that directly match the editor's [wrapper
     element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
     added—need to be explicitly differentiated by adding an `&` to
     the selector for that element—for example
     `&.cm-focused`.
-    
+
     When `dark` is set to true, the theme will be marked as dark,
     which will cause the `&dark` rules from [base
     themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
@@ -8223,19 +8223,19 @@ class RectangleMarker {
     Create a marker with the given class and dimensions. If `width`
     is null, the DOM element will get no width style.
     */
-    constructor(className, 
+    constructor(className,
     /**
     The left position of the marker (in pixels, document-relative).
     */
-    left, 
+    left,
     /**
     The top position of the marker.
     */
-    top, 
+    top,
     /**
     The width of the marker, or null if it shouldn't get a width assigned.
     */
-    width, 
+    width,
     /**
     The height of the marker.
     */
@@ -10566,4 +10566,4 @@ function highlightTrailingWhitespace() {
 */
 const __test = { HeightMap, HeightOracle, MeasuredHeights, QueryType, ChangedRange, computeOrder, moveVisually };
 
-export { BidiSpan, BlockInfo, BlockType, Decoration, Direction, EditorView, GutterMarker, MatchDecorator, RectangleMarker, ViewPlugin, ViewUpdate, WidgetType, __test, closeHoverTooltips, crosshairCursor, drawSelection, dropCursor, getDrawSelectionConfig, getPanel, getTooltip, gutter, gutterLineClass, gutters, hasHoverTooltips, highlightActiveLine, highlightActiveLineGutter, highlightSpecialChars, highlightTrailingWhitespace, highlightWhitespace, hoverTooltip, keymap, layer, lineNumberMarkers, lineNumbers, logException, panels, placeholder, rectangularSelection, repositionTooltips, runScopeHandlers, scrollPastEnd, showPanel, showTooltip, tooltips };
+export { BidiSpan, BlockInfo, BlockType, Decoration, Direction, EditorView, GutterMarker, MatchDecorator, RectangleMarker, ViewPlugin, ViewUpdate, WidgetType, __test, closeHoverTooltips, crosshairCursor, drawSelection, dropCursor, getDrawSelectionConfig, getPanel, getTooltip, gutter, gutterLineClass, gutters, hasHoverTooltips, highlightActiveLine, highlightActiveLineGutter, highlightSpecialChars, highlightTrailingWhitespace, highlightWhitespace, hoverTooltip, keymap, layer, lineNumberMarkers, lineNumbers, logException, panels, placeholder, rectangularSelection, repositionTooltips, runScopeHandlers, scrollPastEnd, showPanel, showTooltip, tooltips, baseThemeID, baseLightID, baseDarkID, baseTheme$1 as baseTheme };
